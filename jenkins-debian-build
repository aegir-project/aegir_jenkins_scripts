#!/bin/sh -e

# This script is designed to automatically build Debian packages for Jenkins
#
# It is used in the two following jobs:
# S_aegir-debian-official-3.x
# S_aegir-debian-official
# D_aegir-debian-auto

DOMAIN=`hostname -f`
KEY="jenkins@$DOMAIN"

usage() {
    cat <<EOF
Usage: $0 [ -hvn -k <key> ]

Build an automatic package with the provided key.

-h: this help
-v: show every command ran
-n: simulate: build but do not upload the package
-k <key>: sign the package with this key (default: $KEY)
-u: upload the package (default: don't upload)
-t <ref>: build the package from a ref, usually a tag
EOF
}

upload=false
official=false

set -- `getopt hvnk:ut: $*`
for i; do
    case "$i" in
        -h) shift; usage;;
        -v) shift; set -x;;
        -n) shift; simulate='echo > ';;
        -k) shift; KEY=$1; shift;;
        -u) shift; upload=true;;
        -t) shift; tag=$1; shift;;
        --) shift; break;;
    esac
done


# the upstream version: strip the 6.x and turn the appendix into
# +N.foo where N is the number of commits since last tag and foo is
# the hash
if ! [ -z "$tag" ]; then
    jenkins_version="$tag"
    # we checkout the tag, using git reset
    # this is necessary so that git-buildpackage doesn't complain about not being on a branch
    git reset --hard $tag
else
    version=$(sed -ne 's/^[^(]*(\([^)]*\)).*/\1/;1p' debian/changelog)
    commit=$(git log -n 1 --oneline | sed 's/ .*$$//')
    jenkins_version="${version}+${BUILD_NUMBER}.${commit}"
fi

echo "Building aegir-${jenkins_version} with key $KEY - build tag: ${BUILD_TAG}"

$simulate rm -rf build-area/*

if ! [ -z "$tag" ] ; then
    $simulate git-buildpackage -k${KEY}
else
    $simulate dch -D unstable -v ${jenkins_version} "automatic jenkins build ${BUILD_TAG}"
    $simulate git commit -m"dummy commit for jenkins ${BUILD_TAG} autobuild" debian/changelog
    $simulate git-buildpackage -k${KEY}
fi

if $upload; then
    echo "Uploading package to aegir repository"
    $simulate dput -f aegir build-area/*.changes

    echo "Waiting 10 seconds to let reprepro pickup the new files"
    $simulate sleep 10
fi
$simulate git reset --hard ${GIT_COMMIT} || true
